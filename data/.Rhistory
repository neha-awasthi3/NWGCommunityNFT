mean(part3)
mean(y0s)
sin(7)+0.2*7
estimatedMSE
avgThisMSE ## compate to MSE from part 7c
get_mse(result)
get_mse <- function(model.fit, var.estimate = FALSE) {
# Extract MSE from model.fit
class_model.fit <- class(model.fit)[1]
if (class_model.fit == "lm") {
mse <- rev(anova(model.fit)$"Mean Sq")[1]
} else if (class_model.fit == "glm") {
mse <- sum(model.fit$residuals^2) / model.fit$df.residual
}
# Get variance estimate for error variance if requested
if (var.estimate) {
mse.var <- 2 * mse^2 / model.fit$df.residual
mse <- c(mse.hat = mse, mse.var = mse.var)
}
# Return mse variable
return(mse)
}
get_mse(result)
avgThisMSE ## compate to MSE from part 7c
y0s[i]-sin(7)+0.2*7)^2
(y0s[i]-sin(7)+0.2*7)^2
y0s[i]
sin(7)+0.2*7
2.056987-1.930732
y0s[i]-sin(7)+0.2*7
part1 <- c()
part3 <- c()
for (i in 1:10000){
part1 <- c(part1, (predictedY0s[i]-avgPredY0)^2)
part2 <- (sin(7)+0.2*7-avgPredY0)^2
part3 <- c(part3, (y0s[i]-(sin(7)+0.2*7))^2)
}
estimatedMSE <- mean(part1)+part2+mean(part3)
avgThisMSE ## compate to MSE from part 7c
estimatedMSE
## Megan Marshall
## mem5ak
set.seed(18)
##7a
sinLineary <- function(xValues, beta, sig){
errors <- rnorm(length(xValues), 0, sig^2) ##calculate all the error terms
y<- c() ## where I will store the y values
for (index in 1:length(xValues)){ ## go through every x and corresponding error term
newY <- sin(x[index]) + beta*x[index] + errors[index] ## calculate the new y value
y<-c(y, newY) ##add the y value to the end of the other y values
}
return(y)
}
##7b
predictedY0s <- c()
for (i in 1:10000){
x <- seq(-10,10,by=0.1) ## x values
y <- sinLineary(x, 0.2, 1) ## y values
sinx <- sin(x)
result <- lm(y~sinx+x) ## regression
predictedY0 <- predict(result, data.frame(sinx<-c(sin(7)), x<-c(7)))
predictedY0s <- c(predictedY0s, predictedY0)
}
y0s <- c()
for (i in 1:10000){
y0 <- sinLineary(c(7), 0.2, 1)
y0s <- c(y0s, y0)
}
## 7c
allMSE <- c()
for (i in 1:10000){
thisMSE <- (y0s[i]-predictedY0s[i])^2
allMSE <- c(allMSE, thisMSE)
}
avgThisMSE <- mean(allMSE)
## 7d
avgPredY0 <- mean(predictedY0s)
## 7e
part1 <- c()
part3 <- c()
for (i in 1:10000){
part1 <- c(part1, (predictedY0s[i]-avgPredY0)^2)
part2 <- (sin(7)+0.2*7-avgPredY0)^2
part3 <- c(part3, (y0s[i]-(sin(7)+0.2*7))^2)
}
estimatedMSE <- mean(part1)+part2+mean(part3)
avgThisMSE ## compate to MSE from part 7c
estimatedMSE
package("ISLR")
load("ISLR")
lib("ISLR")
library("ISLR")
library("ISLR")
hilow <- c()
if(AUTO.mpg > median(AUTO.mpg)){
hilow <- c(hilow, 1)
}
else{
hilow <- c(hilow, 0)
}
library("ISLR")
hilow <- c()
if(AUTO.mpg > median(AUTO.mpg)){
hilow <- c(hilow, 1)
}
ifelse{
hilow <- c(hilow, 0)
}
ifelse(AUTO.mpg > median(AUTO.mpg), 1, 0)
ifelse(auto.mpg > median(auto.mpg), 1, 0)
auto
AUTO
Auto
ifelse(Auto.mpg > median(Auto.mpg), 1, 0)
ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
hilow <- ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
hilow
newData <- rbind(Auto, hilow)
boxplot(Auto$weight ~ hilow)
sample.data<-sample.int(nrow(Auto, hilow), floor(.50*nrow(data)), replace = F)
sample.data<-sample.int(nrow(cbind(Auto, hilow)), floor(.50*nrow(data)), replace = F)
sample.data<-sample.int(nrow(cbind(Auto, hilow)), floor(.50*nrow(cbind(Auto, hilow)), replace = F)
train<-data[sample.data, ]
test<-data[-sample.data, ]
sample.data<-sample.int(nrow(cbind(Auto, hilow)), floor(.50*nrow(cbind(Auto, hilow))), replace = F)
train<-data[sample.data, ]
cbind(Auto, hilow)
newData <- cbind(Auto, hilow)
set.seed(818)
newData <- cbind(Auto, hilow)
sample.data<-sample.int(nrow(newData), floor(.50*nrow(newData)), replace = F)
train<-newData[sample.data, ]
test<-newData[-sample.data, ]
install.packages(ROCR)
library(ROCR)
install.packages("ROCR")
library(ROCR)
library("ISLR")
hilow <- ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
boxplot(Auto$weight ~ hilow)
set.seed(818)
newData <- cbind(Auto, hilow)
sample.data<-sample.int(nrow(newData), floor(.50*nrow(newData)), replace = F)
train<-newData[sample.data, ]
test<-newData[-sample.data, ]
result_train<-glm(hilow~weight+year, family=binomial, data=train)
preds<-predict(result_train,newdata=test, type="response")
library(ROCR)
rates<-prediction(preds, test$hilow)
roc_result<-performance(rates,measure="tpr", x.measure="fpr")
plot(roc_result, main="ROC Curve")
lines(x = c(0,1), y = c(0,1), col="red")
confusion.mat<-table(test$hilow,preds > 0.5)
confusion.mat
overall.error<- (confusion.mat[1,2] + confusion.mat[2,1]) /sum(confusion.mat)
overall.error
sd(6.1,5.1,4.5,4.5,4.0)
sd([6.1,5.1,4.5,4.5,4.0])
sd(c(6.1,5.1,4.5,4.5,4.0)
sd(c(6.1,5.1,4.5,4.5,4.0)
sd(c(6.1,5.1,4.5,4.5,4.0))
34/244
-10.338685+.035937*89+.12585*28.1+.029149
x <- -10.338685+.035937*89+.12585*28.1+.029149
e^x
exp(x)
exp(x)/(1+exp(e))
exp(x)/(1+exp(x))
library(ISLR)
College
data<-College
is.factor(data$Private)
tree.class.train<-tree(Private~., data=train)
summary(tree.class.train)
library(ISLR)
library(tree) ##to fit trees
library(randomForest) ##for random forests (and bagging)
library(gbm) ##for boosting
data<-College
set.seed(1)
sample.data<-sample.int(nrow(data), floor(.50*nrow(data)), replace = F)
train<-data[sample.data, ]
test<-data[-sample.data, ]
tree.class.train<-tree(Private~., data=train)
install.packages("tree")
install.packages("randomForest")
library(tree) ##to fit trees
library(randomForest) ##for random forests (and bagging)
tree.class.train<-tree(Private~., data=train)
summary(tree.class.train)
set.seed(1)
sample.data<-sample.int(nrow(data), floor(.50*nrow(data)), replace = F)
train<-data[sample.data, ]
test<-data[-sample.data, ]
tree.class.train<-tree(Private~., data=train)
summary(tree.class.train)
plot(tree.class.train)
text(tree.class.train, cex=0.75, pretty=0)
table(pred.test, tree.pred.test) ##actual in rows, predictions in cols
mean(tree.pred.test==pred.test) ##overall accuracy rate
tree.pred.test<-predict(tree.class.train, newdata=test, type="class")
table(pred.test, tree.pred.test) ##actual in rows, predictions in cols
mean(tree.pred.test==pred.test) ##overall accuracy rate
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
library(gbm) ##for boosting
install.packages("gbm")
library(gbm) ##for boostingi
library(gbm) ##for boostingi
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
cv.class<-cv.tree(tree.class.train, K=10, FUN=prune.misclass)
cv.class
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
trees.num.class
High<-ifelse(Boston$medv<median(Boston$medv), "No", "Yes")
High<-factor(High)
contrasts(High) ##yes is coded as 1
Boston.new<-data.frame(Boston[,-14], High)
library(MASS)
library(tree) ##to fit trees
library(randomForest) ##for random forests (and bagging)
library(gbm) ##for boosting
High<-ifelse(Boston$medv<median(Boston$medv), "No", "Yes")
High<-factor(High)
contrasts(High) ##yes is coded as 1
Boston.new<-data.frame(Boston[,-14], High)
set.seed(1)
sample.data<-sample.int(nrow(Boston.new), floor(.50*nrow(Boston.new)), replace = F)
train2<-Boston.new[sample.data, ]
test2<-Boston.new[-sample.data, ]
pred.test<-test2[,"High"]
tree.class.train<-tree(High~., data=train2)
summary(tree.class.train) ##16 terminal nodes! difficult to interpret
plot(tree.class.train)
text(tree.class.train, cex=0.75, pretty=0) ##Note: If there are categorical predictors, should have an additional argument: pretty=0 so R will use the category names in the tree
tree.pred.test<-predict(tree.class.train, newdata=test2, type="class") ##since response is categorical, need to specify type="class". For regression trees this needs to be removed.
table(pred.test, tree.pred.test) ##actual classes in rows, predicted classes in columns
mean(tree.pred.test==pred.test) ##0.838
set.seed(2)
cv.class<-cv.tree(tree.class.train, K=10, FUN=prune.misclass) ##FUN=prune.misclass so error rate is used to guide CV and pruning, rather than the deviance which is the default (and should not be used in classification).
cv.class
plot(cv.class$size, cv.class$dev,type='b')
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
trees.num.class ##4 terminal nodes. A lot smaller than recursive binary splitting
prune.class<-prune.misclass(tree.class.train, best=trees.num.class)
prune.class
trees.num.class ##4 terminal nodes. A lot smaller than recursive binary splitting
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
trees.num.class ##4 terminal nodes. A lot smaller than recursive binary splitting
set.seed(3)
bag.class<-randomForest(Private~., data=train, mtry=17, importance=TRUE)
bag.class ##note with classification tree OOB estimates are provided
importance(bag.class)
varImpPlot(bag.class)
pred.bag<-predict(bag.class, newdata=test2)
mean(pred.bag==pred.test) ##0.889. Improvement over pruning.
library(randomForest) ##for random forests (and bagging)
library(gbm) ##for boosting
library(tree) ##to fit trees
library(MASS)
set.seed(3)
bag.class<-randomForest(Private~., data=train, mtry=17, importance=TRUE)
bag.class ##note with classification tree OOB estimates are provided
importance(bag.class)
varImpPlot(bag.class)
pred.bag<-predict(bag.class, newdata=test2)
mean(pred.bag==pred.test) ##0.889. Improvement over pruning.
pred.bag<-predict(bag.class, newdata=test)
mean(pred.bag==pred.test) ##0.889. Improvement over pruning.
pred.test<-test2[,"Private"]
pred.test<-test[,"Private"]
mean(pred.bag==pred.test) ##0.889. Improvement over pruning.
prune.class<-prune.misclass(tree.class.train, best=trees.num.class)
prune.class
plot(prune.class)
text(prune.class, cex=0.75, pretty=0)
data<-College
set.seed(1)
sample.data<-sample.int(nrow(data), floor(.50*nrow(data)), replace = F)
train<-data[sample.data, ]
test<-data[-sample.data, ]
tree.class.train<-tree(Private~., data=train)
summary(tree.class.train)
plot(tree.class.train)
text(tree.class.train, cex=0.75, pretty=0)
tree.pred.test<-predict(tree.class.train, newdata=test, type="class")
table(pred.test, tree.pred.test) ##actual in rows, predictions in cols
mean(tree.pred.test==pred.test) ##overall accuracy rate
set.seed(2)
cv.class<-cv.tree(tree.class.train, K=10, FUN=prune.misclass)
cv.class
trees.num.class<-cv.class$size[which.min(cv.class$dev)]
trees.num.class
prune.class<-prune.misclass(tree.class.train, best=trees.num.class)
prune.class
plot(prune.class)
text(prune.class, cex=0.75, pretty=0)
table(pred.test, tree.pred.prune)
mean(tree.pred.prune==pred.test)
tree.pred.prune<-predict(prune.class, newdata=test, type="class")
table(pred.test, tree.pred.prune)
mean(tree.pred.prune==pred.test)
library(shiny); runApp('N/nitrogen1.R')
runApp('N/nitrogen1.R')
runApp('N/communityTool.R')
library(shiny); runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
library(shiny); runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
library("openxlsx", lib.loc="~/R/win-library/3.6")
install.packages("xlsx")
runApp('NWGCommunityNFT/data/communityTool.R')
library("xlsx", lib.loc="~/R/win-library/3.6")
install.packages("xlsx")
runApp('NWGCommunityNFT/data/communityTool.R')
install.packages("xlsx")
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool.R')
library(shiny); runApp('NWGCommunityNFT/data/communityTool.R')
library(shiny); runApp('NWGCommunityNFT/data/communityTool.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
wastewater_for_block <- total_treated_wastewater / census_block
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
library(shiny); runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
rlang::last_error()
rlang::last_trace()
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
rlang::last_trace()
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
runApp('NWGCommunityNFT/data/communityTool_website.R')
source('NWGCommunityNFT/data/communityTool_website.R')
source('NWGCommunityNFT/data/communityTool_website.R')
setwd("~/NWGCommunityNFT/data")
source('communityTool_website.R')
source('communityTool_website.R')
source('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
library(shiny); runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('communityTool_website.R')
runApp('~/NWGCommunityNFT/communityTool_website.R')
runApp('~/NWGCommunityNFT/communityTool_website.R')
runApp('communityTool_website.R')
